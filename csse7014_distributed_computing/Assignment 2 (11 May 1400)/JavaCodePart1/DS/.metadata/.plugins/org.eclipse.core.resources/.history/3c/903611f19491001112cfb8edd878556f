import exchange.TemperatureHomemanagerPrx;
import exchange.TemperatureHomemanagerPrxHelper;
import java.lang.InterruptedException;


final public class TemperatureSensor extends FileOperation {

	public TemperatureSensor(String file) throws Exception {
		super(file);
	}
	
	public int run(String[] args) {
	        String topicName = "TemperatureSensorData";
	        Ice.ObjectPrx publisher = iceSetup(topicName);
	        

	        //
	        // Get the topic's publisher object, and create a Clock proxy with
	        // the mode specified as an argument of this application.
	        //

	        
	        TemperatureHomemanagerPrx aTemperatureHomemanager = TemperatureHomemanagerPrxHelper.uncheckedCast(publisher);
	        try
	        {
	            while(true)
	            {
	                
	            	aTemperatureHomemanager.temperatureData(getLine());

	                    Thread.currentThread().sleep(1000);
	     
	            }
	        }
	        catch (InterruptedException ex) {
	        	
	        }
	        catch(Ice.CommunicatorDestroyedException ex)
	        {
	            // Ignore
	        }
	        catch (Exception ex) {
	        	
	        }

	        return 0;
	}
	
	private Ice.ObjectPrx iceSetup(String topicName) {
		IceStorm.TopicManagerPrx manager = IceStorm.TopicManagerPrxHelper.checkedCast(communicator().propertyToProxy("SmartHome.Proxy"));
        if(manager == null) {
            System.err.println("Invalid proxy");
            System.exit(1);
        }
        IceStorm.TopicPrx topic = null;
        try
        {
            topic = manager.retrieve(topicName);
        }
        catch(IceStorm.NoSuchTopic e)
        {
            try
            {
                topic = manager.create(topicName);
            }
            catch(IceStorm.TopicExists ex)
            {
                System.err.println(appName() + ": temporary failure, try again.");
            }
        }
        Ice.ObjectPrx publisher = topic.getPublisher();   	
        publisher = publisher.ice_oneway();
       return publisher;
	}

}
