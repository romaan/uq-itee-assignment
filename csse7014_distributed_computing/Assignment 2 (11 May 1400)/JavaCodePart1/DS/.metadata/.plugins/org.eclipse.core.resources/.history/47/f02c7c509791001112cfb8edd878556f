import exchange.TemperatureHomemanagerPrx;
import exchange.TemperatureHomemanagerPrxHelper;
import java.lang.InterruptedException;


final public class TemperatureSensor extends FileOperation {

	public TemperatureSensor(String file) throws Exception {
		super(file);
	}
	
	public int run(String[] args) {
	   
		Ice.ObjectPrx publisher = iceSetup(args[0]);  //Sending Topic Name to iceSetup    	        
	    TemperatureHomemanagerPrx aTemperatureHomemanager = TemperatureHomemanagerPrxHelper.uncheckedCast(publisher);
	    try {
	    	while(true) {
	    	System.out.println("Current temperature:"+temperature+" for seconds:"+time);
			for (int i = 1; i<= time; i++) {
				if (temperatureMode == null || temperatureMode.equals("periodic")) {
					aTemperatureHomemanager.temperatureData(temperature.);					
					System.out.println("Periodic Mode Sensor Message sent");
				}
				System.out.println("Current temperature:"+temperature+" for seconds:"+time+" now:"+i);
		
	    	   
	    	   Thread.currentThread().sleep(1000);
	       	}
	    } catch (InterruptedException ex) {
	        	
	    } catch(Ice.CommunicatorDestroyedException ex) {
	            // Ignore
	    } catch (Exception ex) {
	        	
	    }
	    return 0;
	}
	
	private Ice.ObjectPrx iceSetup(String topicName) {
		IceStorm.TopicManagerPrx manager = IceStorm.TopicManagerPrxHelper.checkedCast(communicator().propertyToProxy("SmartHome.Proxy"));
        if(manager == null) {
            System.err.println("Invalid proxy");
            System.exit(1);
        }
        IceStorm.TopicPrx topic = null;
        try
        {
            topic = manager.retrieve(topicName);
        }
        catch(IceStorm.NoSuchTopic e)
        {
            try
            {
                topic = manager.create(topicName);
            }
            catch(IceStorm.TopicExists ex)
            {
                System.err.println(appName() + ": temporary failure, try again.");
            }
        }
        Ice.ObjectPrx publisher = topic.getPublisher();   	
        publisher = publisher.ice_oneway();
       return publisher;
	}

}
